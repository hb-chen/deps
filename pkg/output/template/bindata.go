// Code generated by go-bindata. DO NOT EDIT.
// sources:
// template/csv.tpl
// template/md.tpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _csvTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\x83\x40\x10\x44\x7b\xbf\x62\x0b\x8b\x04\xee\xfc\x00\x21\x45\x20\xa5\x85\x04\x92\x5e\x74\x22\x8b\x72\x86\xdb\x10\x08\xcb\xfe\x7b\xd0\x8b\x28\xa4\xbb\x79\xb7\xcc\x9b\x7a\xe8\xdd\x1d\x51\x78\x0a\xae\xe2\x16\x41\x20\xee\xc2\x11\xed\xcb\x9d\xbb\x37\xcb\x14\x19\x92\xa9\x7a\x8a\x4d\xe8\x41\xf9\x80\x8f\xa3\xbc\xc3\x93\xca\x13\x15\x64\x96\xa9\x2e\xb9\xa8\x9b\x76\x68\x7a\x90\x99\x5b\xd1\xaf\x7a\x8f\x56\xcb\x9e\x25\xe1\x4c\x16\x13\x3f\x12\xde\x06\x90\x37\xcb\xb6\x78\x50\x1d\x11\xe8\xef\xca\xec\x58\xd2\x5a\xba\xf1\xdb\xb5\x4a\x3b\x3d\x61\x14\x2c\x65\x3e\xc5\xd0\xcd\x3f\xfb\xf7\x37\x00\x00\xff\xff\xaa\x9e\x6a\xb6\x12\x01\x00\x00")

func csvTplBytes() ([]byte, error) {
	return bindataRead(
		_csvTpl,
		"csv.tpl",
	)
}

func csvTpl() (*asset, error) {
	bytes, err := csvTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "csv.tpl", size: 274, mode: os.FileMode(420), modTime: time.Unix(1659539263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\xca\xc2\x30\x14\x05\xe0\x3d\x4f\x71\x86\x0e\xfd\xe1\x4f\x1f\x40\x70\x10\x1c\x3b\x14\x41\x17\x71\x28\xed\xb5\x84\x96\x54\x12\x11\x24\xf7\xbe\xbb\x34\xb5\xb6\x45\x70\x0a\xe7\x4b\x38\x39\x8c\xa2\x6d\xc0\x38\x91\xf3\xa6\xb7\x60\xe4\xa6\x22\xeb\xc9\x83\xb1\x37\x8e\xaa\x3b\x18\xbb\xfa\x61\x7c\xef\xcc\xa0\x8a\xa1\xb5\xd6\xf8\x79\xa8\x10\x34\x5c\x69\x1b\x42\xd2\xd2\xf3\x1f\x49\x4d\x37\x6c\xb6\xc8\x20\xa2\x18\x21\x44\xc9\x8a\xb2\x6a\xcb\x86\x20\x82\x19\xa7\x2d\x2b\xfc\xcc\x5a\xe9\x7b\xe1\x60\xf1\x4b\x73\x1d\x7d\x31\x58\x8b\xa8\xf3\x9c\xd3\x10\x3a\xb2\xf8\x7a\x26\xf2\x77\x49\xa7\xda\xd9\x8f\x87\x7c\xb8\x8a\xe5\xd4\x79\x8a\x75\x7a\x8c\xb6\x86\x08\xab\x45\x50\xaf\x00\x00\x00\xff\xff\x6c\x1d\xbd\x9b\x4f\x01\x00\x00")

func mdTplBytes() ([]byte, error) {
	return bindataRead(
		_mdTpl,
		"md.tpl",
	)
}

func mdTpl() (*asset, error) {
	bytes, err := mdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "md.tpl", size: 335, mode: os.FileMode(420), modTime: time.Unix(1659538912, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"csv.tpl": csvTpl,
	"md.tpl":  mdTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"csv.tpl": &bintree{csvTpl, map[string]*bintree{}},
	"md.tpl":  &bintree{mdTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
